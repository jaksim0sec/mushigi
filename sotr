<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="preconnect" href="https://fonts.googleapis.com" />
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="" />
  <link
    href="https://fonts.googleapis.com/css2?family=Do+Hyeon&amp;family=Noto+Sans+KR:wght@600&amp;display=swap"
    rel="stylesheet"
  />
</head>
<style>
  body {
    width: 100vw;
    height: 100vh;
    margin: 0px;
    padding: 0px;
    background-color: black;
    overflow: hidden;
    font-family: 'Do Hyeon', serif;
  }

  #world {
    width: 100%;
    height: 100%;
    margin: 0px;
    padding: 0px;
    background-color: black;
    overflow: hidden;
    position: absolute;
    left: 50%;
    bottom: 50%;
    transform: translate(-50%, 50%);
    animation: horror 30s linear infinite;
  }

  .obj {
    position: absolute;
    transition: all 0.1s ease;
  }

  #mover {
    transition: left 0s linear;
    background: linear-gradient(180deg, #000000, #ffffff10);
  }

  #mover div img {
    animation: backgroundS 5s ease infinite;
  }
  @keyframes backgroundS {
    0% {
    }
    1% {
      background: #ffffff50;
    }
    15% {
      background: transparent;
    }
    49% {
      background: transparent;
    }
    50% {
      background: #ffffff50;
    }
    57% {
      background: transparent;
    }
  }
  #ground {
    background: linear-gradient(180deg, #6f6f6f, #383634);

    filter: contrast(1.2) brightness(0.9);
  }
  @keyframes horror {
    0% {
    }
    1% {
      filter: brightness(0.5) contrast(1.5);
    }
    2% {
      filter: brightness(1) contrast(1.1);
    }
    4% {
      filter: brightness(0.5) contrast(1.5);
    }
    5% {
      filter: brightness(1) contrast(1.1);
    }
  }
  @keyframes B {
    0% {
      transform: translate(-50%, 50%) scaleY(1);
    }
    50% {
      transform: translate(-50%, 50%) scaleY(0.7);
    }
    100% {
      transform: translate(-50%, 50%) scaleY(1);
    }
  }

  @keyframes J {
    0% {
      transform: scale(1) scaleY(1) translateY(0);
    }
    25% {
      transform: scale(0.9) scaleY(1.4) translateY(-7px);
    }
    75% {
      transform: scale(1.1) scaleY(0.8) translateY(5px);
    }
    100% {
      transform: scale(1) scaleY(1) translateY(0);
    }
  }

  @keyframes smallJ {
    0% {
      transform: scale(1) scaleY(1) translateY(0) scaleX(var(--scaleX));
    }
    25% {
      transform: scaleX(0.95) scaleY(1.2) translateY(-7px) scaleX(var(--scaleX));
    }
    75% {
      transform: scale(1.05) scaleY(0.9) translateY(5px) scaleX(var(--scaleX));
    }
    100% {
      transform: scale(1) scaleY(1) translateY(0) scaleX(var(--scaleX));
    }
  }
</style>

<style>
  #me {
    position: absolute;
    bottom: 210px;
    left: 50%;
    transition: left 0.1s ease;
    transform: translateX(-50%);
  }
  .range {
    width: 170px;
    height: 170px;
    /*border: 1px solid red;*/
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .player {
    width: 170px;
    height: 170px;
    border: 1px solid #00000050;
    border-radius: 10px;
    background-color: white;
    transition: none;
  }

  #meShow img {
    --scaleX: 1;
  }

  .weap {
    width: 7px;
    height: 125px;
    left: 50%;
    transition: all 0.5s ease;
    border: 2px solid black;
    border-radius: 0 10px 0 0;
    background: linear-gradient(180deg, #6f6f6f, #6a371e);
    z-index: 2;
  }

  .weap div {
    width: 13px;
    height: 15.5px;
    background-color: white;
    border-radius: 50% 20% 50% 20%;
    position: absolute;
    border: 1.5px solid black;
  }

  .weap #o1 {
    bottom: 1px;
    width: 6px;
    right: 6px;
    border-radius: 50% 10% 50% 50%;
    z-index: 1;
  }

  .weap #o2 {
    bottom: 22px;
    left: 1px;
    z-index: 3;
  }

  .weap #o3 {
    bottom: 7px;
    width: 10px;
    border-radius: 50% 20% 50% 20%;
    height: 6px;
    left: 2px;
    z-index: 1;
    transform: rotate(45deg);
  }
  .weap #o4 {
    bottom: 30px;
    width: 6px;
    border-radius: 50% 20% 50% 20%;
    height: 8px;
    right: 6px;
    z-index: 1;
    transform: rotate(-20deg);
  }
</style>

<style>
  .window {
    background: linear-gradient(0deg, #000000cc, #00000050);
    border-radius: 5px;
    outline: 4.5px solid #00000080;
    border: 1.5px solid #ffffff90;
    transition: all 0.5s ease;
  }

  #mainMenu {
    width: 300px;
    height: 150px;
    left: 20px;
    top: 50px;
  }

  #lowerStatus {
    width: 70vw;
    height: 70px;
    left: 50%;
    bottom: 70px;
    transform: translateX(-50%);
    border-radius: 10px;
  }

  #inventory {
    width: 80vw;
    height: 80vh;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(0deg, #000000cc, #00000010);
  }

  #inventoryCover {
    width: 100vw;
    height: 100vh;
    background: #00000090;
    position: absolute;
    backdrop-filter: blur(4px);
    transition: all 0.5s ease;
  }

  #inventory .card {
    font-family: 'Noto Sans KR', serif;
  }

  #inventory hr {
    height: 0px;
    border: 0.5px solid white;
  }

  #inventory button {
    transition: all 0.2s ease;
    color: white;
    font-family: 'Noto Sans KR', serif;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 0px;
    width: 50px;
    height: 30px;
    line-height: 4px;
  }
  #inventory button:hover {
    filter: brightness(2);
    transform: scale(1.02);
  }
  #inventory button:active {
    transform: scale(0.95);
  }
</style>
<style>
  .Backblur {
    width: 100vw;
    height: 20px;
    box-shadow: 0px 0px 40px #000000, 0px 0px 40px #000000;
    background-color: black;
    position: absolute;
  }
  .hoverer {
    transition: all 0.5s ease;
  }
  .hoverer:hover {
    color: white;
    background-color: #ffffff30;
    padding: 5px;
    border-radius: 20px;
    transition: all 1s ease;
  }
  #inventory .bigbutton {
    width: 160px;
    height: 52px;
    border-radius: 20px;
    color: #ffffffcc;
    font-size: 16px;
  }
  .tag {
    margin-right: 10px;
    margin-left: 10px;
  }
  .신화 {
    font-weight: bold;
    background: linear-gradient(90deg, #ff6a00, #ee0979);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
</style>
<style>
  /* 공통 progress 스타일 */
  progress {
    width: 80px;
    height: 12px;
    -webkit-appearance: none;
    appearance: none;
    opacity: 0.8;
    transition: all 0.2s ease;
    border-radius: 8px;
    border: 2px solid transparent;
  }

  /* 공통 바 배경 스타일 */
  progress::-webkit-progress-bar {
    border-radius: 8px;
  }

  /* 공통 값(value) 스타일 */
  progress::-webkit-progress-value {
    border-radius: 8px;
    transition: all 2s ease;
  }

  /* HP 바 스타일 */
  .MANAbar {
    border-color: #5448ff;
  }
  .MANAbar::-webkit-progress-bar {
    background-color: #1b1384;
  }
  .MANAbar::-webkit-progress-value {
    background-color: #5448ff;
  }

  /* Mana 바 스타일 */
  .HPbar {
    border-color: #ff4848;
  }
  .HPbar::-webkit-progress-bar {
    background-color: #841313;
  }
  .HPbar::-webkit-progress-value {
    background-color: #ff4848;
  }
</style>

<!--</div>-->
<body>
  <div id="world">
    <div
      id="ground"
      style="width: 100%; position: absolute; bottom: 0px; height: 250px"
    >
      <div
        id="mover"
        style="
          height: 55vh; /*border: 1px solid white;*/
          position: absolute;
          bottom: 250px;
        "
      >
        <div style="height: 100%; display: flex">
          <img src="https://ifh.cc/g/vnjDwH.png" style="height: 100%" />
          <img
            src="https://ifh.cc/g/vnjDwH.png"
            style="height: 100%; animation-delay: 0.1s"
          />
          <img
            src="https://ifh.cc/g/vnjDwH.png"
            style="height: 100%; animation-delay: 0.25s"
          />
          <img
            src="https://ifh.cc/g/vnjDwH.png"
            style="height: 100%; animation-delay: 0.4s"
          />
        </div>
        <div
          style="
            width: 100%;
            height: 30vh;
            position: absolute;
            background: linear-gradient(0deg, #c3c3c3, #ececec);
            top: -30vh;
          "
        ></div>
        <div
          class="obj"
          style="
            height: 100vh;
            background-color: #00000000;
            width: 100%;
            bottom: 0px;
            box-shadow: inset 0px 0px 60px #000000, inset 0px 0px 60px #000000,
              inset 0px 0px 60px #000000, inset 0px 0px 60px #000000;
          "
        ></div>
        <div
          id="onground"
          class="obj"
          style="width: 100%; height: 100%; bottom: -30px"
        >
          <div
            class="obj"
            style="
              background-color: grey;
              width: 100px;
              height: 150px;
              bottom: 0px;
              left: 400px;
              border-radius: 10px;
            "
          >
            테스트용 물체
          </div>
        </div>
      </div>
    </div>
    <div id="me" class="obj range">
      <div
        id="meShow"
        class="obj"
        style="justify-content: center; width: 200px; display: flex"
      >
        <div id="meWeap" class="obj weap">
          <div id="o1"></div>
          <div id="o2"></div>
          <div id="o3"></div>
          <div id="o4"></div>
        </div>
        <progress
          id="meMana"
          class="MANAbar obj"
          style="top: -40px"
          value="40"
          max="100"
        ></progress>
        <progress
          id="meHP"
          class="HPbar obj"
          style="top: -55px"
          value="40"
          max="100"
        ></progress>
        <img
          src="https://ifh.cc/g/60O0tV.png"
          style="
            height: 160px;
            animation: smallJ 1s ease;
            transition: transform 0.5s ease;
          "
        />
      </div>
    </div>
  </div>
</body>

<div class="window obj" id="mainMenu"></div>
<div class="window obj" id="lowerStatus"></div>

<div class="Backblur" id="o2"></div>
<div class="Backblur" id="o1" style="height: 40px; bottom: 0px"></div>

<div id="inventoryCover">
  <div class="window obj" id="inventory" style="position: relative">
    <div
      class="obj hoverer"
      style="
        font-size: 60px;
        color: #ffffffcc;
        top: 50%;
        transform: translate(0, -50%);
        left: 20px;
      "
    >
      ◀
    </div>
    <div
      class="obj hoverer"
      style="
        font-size: 60px;
        color: #ffffffcc;
        top: 50%;
        transform: translate(0, -50%);
        right: 20px;
      "
    >
      ▶
    </div>
    <button class="window obj" style="top: 10px; right: 30px">열기</button>
    <button
      class="window obj"
      style="top: 10px; right: 95px"
      onclick='toggleShow("#inventoryCover")'
    >
      닫기
    </button>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: white;
        font-size: 30px;
        margin-top: 35px; /*3.5%*/
      "
    >
      <hr style="width: 40%" />
      소유물
      <hr style="width: 40%" />
    </div>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: white;
        font-size: 40px;
        margin-top: 35px; /*3.5%*/
      "
    >
      ▶ 살벌한 단소 ◀
    </div>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: #ffffff90;
        font-size: 20px;
        margin-top: 5px; /*3.5%*/
      "
    >
      <span class="신화 tag">[신화 등급]</span>
      <div>⋅ 양손무기</div>
    </div>
    <div
      style="
        width: 100%;
        height: 30%;
        display: flex;
        justify-content: center;
        margin-top: 20px;
      "
    >
      <img
        src=""
        style="
          height: 100%;
          border: 0.1px solid white;
          max-width: 30%;
          border-radius: 10px;
        "
      />
    </div>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: #ffffff99;
        font-size: 15px;
        margin-top: 35px; /*3.5%*/
      "
    >
      지하철 바닥에 굴러다니는 수상한 단소.
    </div>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: #ffffff99;
        font-size: 15px;
        margin-top: 5px; /*3.5%*/
      "
    >
      윗부분이 살짝 찌그러져있다.
    </div>
    <div
      style="
        width: 100%;
        display: flex;
        justify-content: center;
        color: #ffffff99;
        font-size: 15px;
        margin-top: 5px /*3.5%*/;
        gap: 20px;
        position: absolute;
        bottom: 5%;
      "
    >
      <button
        class="bigbutton"
        style="background: linear-gradient(180deg, #ffffff20, #ffffff05)"
      >
        상세정보 보기
      </button>
      <button
        class="bigbutton"
        style="background: linear-gradient(180deg, #ffffff50, #ffffff15)"
      >
        아이템 사용하기
      </button>
    </div>
  </div>
</div>

<!--기본블럭-->
<script>
  function Eincludes(list, who) {
    return list.some((key) => who.includes(key));
  }

  function toggleShow(n) {
    let what = HTC(n, 'display') == 'none';
    if (what) {
    } else {
      HTML(n).style.opacity = '0';
      setTimeout(() => {
        HTML(n).style.display = 'none';
      }, 500);
    }
  }

  function HTML(name) {
    return document.querySelector(name);
  }
  function HTC(element, styleProperty) {
    return window
      .getComputedStyle(HTML(element))
      .getPropertyValue(styleProperty);
  }

  function GBDR(name) {
    return HTML(name).getBoundingClientRect();
  }
  function 랜덤(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function 토글(문자, 글자) {
    let 대상 = 문자;
    if (대상.includes(글자)) {
      while (대상.includes(글자)) {
        대상 = 대상.replace(글자, '');
      }
    } else {
      대상 += 글자;
    }
    return 대상;
  }

  function 터치(대상일, 대상이) {
    const 대상1 = HTML(대상일).getBoundingClientRect();
    const 대상2 = HTML(대상이).getBoundingClientRect();

    const 대상1중심 = {
      x: 대상1.left + 대상1.width / 2,
      y: 대상1.top + 대상1.height / 2,
    };
    const 대상2중심 = {
      x: 대상2.left + 대상2.width / 2,
      y: 대상2.top + 대상2.height / 2,
    };

    const 거리 = {
      x: Math.abs(대상1중심.x - 대상2중심.x),
      y: Math.abs(대상1중심.y - 대상2중심.y),
    };

    const 허용거리 = {
      x: (대상1.width + 대상2.width) / 2,
      y: (대상1.height + 대상2.height) / 2,
    };

    return 거리.x <= 허용거리.x && 거리.y <= 허용거리.y;
  }
  function 이동(대상, dx, dy) {
    const 요소기록 = HTML(대상);
    const world =
      대상 == '#me' || 대상 == '#notMe' ? HTML('#ground') : HTML('#world');
    const padding = 5;
    const currentX = parseFloat(요소기록.style.left || 0);
    const currentY = parseFloat(요소기록.style.bottom || 0);
    const newX =
      /*Math.max(
      padding,
      Math.min(
        world.offsetWidth - 요소기록.offsetWidth - padding,
        currentX + dx
      )
    )*/ currentX + dx;
    const newY =
      /*Math.max(
      padding,
      Math.min(
        world.offsetHeight - 요소기록.offsetHeight - padding,
        currentY + dy
      )
    )*/ currentY + dy;

    순간이동(대상, newX, newY);
  }

  function 순간이동(대상, x, y) {
    const 대상요소기록 = HTML(대상);
    const 부모요소 = 대상요소기록.offsetParent || document.body;
    const 부모너비 = 부모요소.offsetWidth;
    const 부모높이 = 부모요소.offsetHeight;
    const 요소기록위치 = 대상요소기록.style;
    if (typeof x === 'string' && x.includes('%')) {
      const percentX = parseFloat(x) / 100;
      x = percentX * 부모너비;
    }
    if (typeof y === 'string' && y.includes('%')) {
      const percentY = parseFloat(y) / 100;
      y = percentY * 부모높이;
    }
    요소기록위치.left = `${x}px`;
    요소기록위치.bottom = `${y}px`;
  }

  function 방향(대상, 목표) {
    const 대상요소기록 = HTML(대상).getBoundingClientRect();
    const 목표요소기록 = HTML(목표).getBoundingClientRect();
    const 대상중심 = {
      x: 대상요소기록.left + 대상요소기록.width / 2,
      y: 대상요소기록.bottom + 대상요소기록.height / 2,
    };
    const 목표중심 = {
      x: 목표요소기록.left + 목표요소기록.width / 2,
      y: 목표요소기록.bottom + 목표요소기록.height / 2,
    };
    const dx = 목표중심.x - 대상중심.x;
    const dy = 대상중심.y - 목표중심.y;
    let angle = Math.atan2(dx, dy) * (180 / Math.PI);
    return angle >= 0 ? angle : 360 + angle;
  }

  function 방향이동(대상, 각도, 크기) {
    let 패딩 = 0;
    const 대상요소기록 = HTML(대상);
    const 대상위치 = 대상요소기록.getBoundingClientRect();
    const 대상중심 = {
      x: 대상위치.left + 대상위치.width / 2,
      y: 대상위치.bottom,
    };
    const radian = 각도 * (Math.PI / 180);
    const 이동량 = {
      x: Math.sin(radian) * 크기,
      y: Math.cos(radian) * 크기,
    };
    이동(대상, 이동량.x, 이동량.y, 패딩);
  }

  function 거리(대상1, 대상2) {
    const 대상1위치 = HTML(대상1).getBoundingClientRect();
    const 대상2위치 = HTML(대상2).getBoundingClientRect();
    const 대상1중심 = {
      x: 대상1위치.left + 대상1위치.width / 2,
      y: 대상1위치.bottom + 대상1위치.height / 2,
    };
    const 대상2중심 = {
      x: 대상2위치.left + 대상2위치.width / 2,
      y: 대상2위치.bottom + 대상2위치.height / 2,
    };
    const dx = 대상2중심.x - 대상1중심.x;
    const dy = 대상2중심.y - 대상1중심.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  function 회전(directive, angle) {
    const target = document.querySelector(directive);

    if (!target) {
      console.error('대상을 찾을 수 없습니다:', directive);
      return;
    }
    const existingTransform = target.style.transform || '';
    const currentRotation = existingTransform.match(
      /rotate\((-?\d+\.?\d*)deg\)/
    );
    let currentAngle = currentRotation ? parseFloat(currentRotation[1]) : 0;
    const newAngle = currentAngle + angle;
    target.style.transform = `${existingTransform.replace(
      /rotate\(-?\d+\.?\d*deg\)/,
      ''
    )} rotate(${newAngle}deg)`;
    target.style.transformOrigin = 'center';
  }

  function 점프(대상, 힘, 보정, 보정2) {
    //if(정보[대상.replace('#','$')].체력<=0){return}
    const 요소 = HTML(대상);
    /*요소.style.transition = 'left 0.1s ease, bottom 0s linear';*/
    const 최초위치1 = parseInt(HTC(대상, 'bottom'));
    //const 최초위치2 = parseInt(HTC(대상,'left'));
    let 물리 = 힘;
    let 높이 = 0;
    const 시행 = setInterval(() => {
      이동(대상, 0, Number(물리.toFixed(2)) * 보정2);
      높이 = 높이 + Number(물리.toFixed(2));
      //console.log(최초위치1+Number(물리.toFixed(2)))
      물리 -= 0.3;
      if (물리 < -힘) {
        clearInterval(시행);
        순간이동(대상, parseInt(HTC(대상, 'left')), 최초위치1);
        //setTimeout(()=>{
        ///*요소.style.transition = 'all 0.2s ease';*/},20)
      }
    }, 20);
  }
</script>

<!--기본정의-->
<script>
  const obj = {
    me: HTML('#me'),
    world: HTML('#world'),
    ground: HTML('#ground'),
  };
  const objI = {
    'me': { mana: 100, hp: 100, speed: 10, maxspeed: 10 ,ap: 10, move: { x: -1, y: 0 },dir:-1 },
  };
  const waiter = { 'me': { jump: false, attack: false, speed: false } };
  const objInterval = { me: { move: null } };

  const img = {
    playerMove: [
      'https://ifh.cc/g/c7MQhg.png',
      'https://ifh.cc/g/HjwfGo.png',
      'https://ifh.cc/g/c7MQhg.png',
      'https://ifh.cc/g/60O0tV.png',
      'https://ifh.cc/g/52rYhs.png',
      'https://ifh.cc/g/BsFXrh.png',
      'https://ifh.cc/g/52rYhs.png',
      'https://ifh.cc/g/60O0tV.png',
    ],

    //https://ifh.cc/g/skqsQV.png https://ifh.cc/g/o95Nsp.png
  };

  //초기 css 정의
  //무기 스타일 동기화
  HTML('#meWeap').style.transform =
    'translate(-70px,-20px) rotate(-50deg) scaleX(-1)';
</script>

<!--입력관리-->
<script>
  let 입력 = [];
  let 이동값 = objI['me'].move;
  let 길이 = 0;
  /*

//let 초기정보 = { '#PLR': { x: 0, y: 0, name: '#PLR' } };
function 스타일동기화() {
  const objs = document.querySelectorAll('.obj');
  objs.forEach((el) => {
    const cs = window.getComputedStyle(el);
    const l = cs.left;
    const b = cs.bottom;
    const t = el.transform;
    el.style.left = l;
    el.style.bottom = b;
    //el.style.transform = t;
  });
}
스타일동기화();*/
  document.addEventListener('keydown', (e) => {
    const 키 = e.key;
    if (!입력.includes(키)) {
      입력.push(키);
    }
    if (objInterval['me']['move'] == null && objInterval['me']['move_weap'] == null && objInterval['me']['move_img'] == null) {
      길이 = 0;
      let count = 0;
      if(Eincludes(['a','A','d','D','w','W'],입력)){
      objInterval['me']['move_weap'] = setInterval(() => {
        if (!waiter['me'].attack) {
          if (HTML('.weap').style.transform.includes('50')) {
            HTML('.weap').style.transform = HTML('.weap')
              .style.transform.replace('50', '60')
              .replace('-20', '-15');
            //console.log(HTML('.weap').style.transform)
          } else {
            if (
              !waiter['me'].attack &&
              !HTML('#meWeap').style.transform.includes(
                `(${50 * (이동값.x / Math.abs(이동값.x))}deg`
              )
            ) {
              //console.log('fixed')
              weapDirSet('me', objI['me'].move,1);
            }
          }
        }
        //console.log(HTML('.weap').style.transform.includes('50'))
      }, 280);}
      if(Eincludes(['a','A','d','D','w','W'],입력)){
        objInterval['me']['move_img'] = setInterval(() => {
        if (!waiter['me'].jump) {
          count = count + 2 > img.playerMove.length ? 0 : count + 1;
          HTML('#meShow img').src = img.playerMove[count];
        } else {
          HTML('#meShow img').src = img.playerMove[1];
        }
        return
        if(입력.length == 0){
          //console.log('dd')
          setTimeout(()=>{return},100)
        }
      }, 120);
      }
      
      setTimeout(() => {
        objInterval['me']['move'] = setInterval(() => {
          길이 += 50 / 1000;
          이동값.x = 0;
          이동값.y = 0;
          if (
            Eincludes(['E', 'e', 'Q', 'q', ' '], 입력) &&
            !waiter['me'].attack
          ) {
            weapAT('me', waiter['me'].attack, objI['me'].move, me);
          } 
          if (Eincludes(['a', 'A', 'ArrowLeft'], 입력)) {
            이동값.x -= objI['me'].speed;
            HTML('#meShow img').style.transform = 'scaleX(1)';
            HTML('#meSHow img').style.setProperty('--scaleX', '1');
          }
          if (Eincludes(['d', 'D', 'ArrowRight'], 입력)) {
            이동값.x += objI['me'].speed;
            HTML('#meShow img').style.transform = 'scaleX(-1)';
            HTML('#meSHow img').style.setProperty('--scaleX', '-1');
          }
          if (Eincludes(['w', 'W', 'ArrowUP'], 입력) && !waiter['me'].jump) {
            waiter['me'].jump = true;
            점프('#ground', 10, ['4px', '4px'], -0.5);
            점프('#meShow', 10, ['4px', '4px'], 1);

            setTimeout(() => {
              HTML('#meShow').style.animation = 'smallJ 1s ease';
              setTimeout(() => {
                waiter['me'].jump = false;
              }, 400);
              setTimeout(() => {
                HTML('#meShow').style.animation = 'none';
              }, 1000);
            }, 1500);
          }
          if (
            Eincludes(['S', 's'], 입력) &&
            objI['me'].mana > 0 &&
            !waiter['me'].speed &&
            Math.abs(이동값.x) > 0
          ) {
            waiter['me'].speed = true;
            for (let i = 0; i < 5; i++) {
              setTimeout(() => {
                불꽃({
                  x:
                    parseInt(HTC('#me', 'left')) -
                    parseInt(HTC('#mover', 'left')) +
                    랜덤(-50, 50),
                  y:
                    -parseInt(HTC('#ground', 'bottom')) * 1.5 +
                    100 +
                    랜덤(-60, 20),
                });
              }, (i - 1) * 40);
            }
            objI['me'].speed += 100;
            objI['me'].mana -= 5;
            setTimeout(() => {
              objI['me'].speed -= 100;
              Bar();
              setTimeout(() => {
                waiter['me'].speed = false;
              }, 800);
            }, 100);
          }
          
          
          objI['me'].dir = Math.sign(이동값.x);
          이동('#mover', -이동값.x, 이동값.y);
        }, 45);
      }, 00);
    }
  });
  
  let 인터버안전제거 = false
  document.addEventListener('keyup', (e) => {
    const 키 = e.key;
    const 인덱스 = 입력.indexOf(키);
    if (인덱스 > -1) {
      입력.splice(인덱스, 1);
    }
    //console.log(인덱스)
    
    if (입력.length == 0 && !인터버안전제거) {
      weapDirSet('me', objI['me'].move,-1);
      //인터버안전제거 = true;
      objI['me'].spped = objI['me'].maxspeed;
      for (var i = 0; i < Object.keys(objInterval['me']).length; i++) {
        clearInterval(objInterval['me'][Object.keys(objInterval['me'])[i]]);
        //console.log(objInterval['me'][Object.keys(objInterval['me'])[i]])
        objInterval['me'][Object.keys(objInterval['me'])[i]] = null;
      }
      //인터버안전제거 = false;
      if (!waiter['me'].attack) {
      }
      if (길이 > 1) {
        HTML('#meShow img').style.animation = 'smallJ 1s ease';
        setTimeout(() => {
          HTML('#meShow img').style.animation = 'none';
        }, 1100);
      }
      HTML('#meShow img').src = img.playerMove[0];
    }
  });

  document.addEventListener('mousedown', (e) => {
    //alert(waiter['me'].attack)
    if (waiter['me'].attack) {
      return;
    }
    weapAT('me', waiter['me'].attack, objI['me'].move, me);
  }); /*
  document.addEventListener('mouseup', (e) => {
    waiter['me'].attack = false;
    
  });*/
</script>

<!--렌더링 전용 함수-->
<script>
  function Bar() {
    Object.keys(objI).forEach((key) => {
      //console.log(`${key} : ${objI[key]}`);
      HTML(`#${key}Mana`).value = objI[key].mana;
      HTML(`#${key}Hp`).value = objI[key].hp;
    });
  }

  Bar();
  //캐릭터 무기 위치
  function weapDirSet(who, where, bias) {
    if (bias == undefined){bias=1}
    let 이동값 = where;
    let dir = bias*objI[who].dir;
    dir = dir==0?1:dir
    HTML(`#${who}Weap`).style.left = `${168 + 60 * dir}px`;
    HTML(`#${who}Weap`).style.transform = `translate(-70px,-20px) rotate(${
      50 * dir
    }deg) scaleX(${dir})`;
  }

  //무기 때리기 모션 1
  function weapAT(who, Waiter, where, test) {
    if (waiter[who].attack) {
      return;
      //console.log('banned');
    }
    weapDirSet('me', objI['me'].move,1);
    //HTML('.weap #o1').style.bottom=`${parseInt(HTML('.weap #o1').style.bottom)+15}px`
    waiter[who].attack = true;
    const w = HTML(`#${who}Weap`);
    w.style.transition = 'all 0.5s ease';
    w.style.transform = w.style.transform.replace('50deg', '2deg');
    w.style.transform = w.style.transform.replace(-20, -40);
    setTimeout(() => {
      w.style.transition = 'all 0.2s ease';
      w.style.transform = w.style.transform.replace('2deg', '150deg');
      w.style.transform = w.style.transform.replace(-40, 50);
      if(parseInt(HTML('#ground').style.bottom)>-40){
      setTimeout(() => {
        for (var i = 0; i < 4; i++) {
          작은불꽃({
            x:
              HTML('#meWeap').getBoundingClientRect().left -
              parseInt(HTC('#mover', 'left'))+(1+(objI[who].move.x==0?0:(objI[who].move.x/Math.abs(objI[who].move.x))))*40+랜덤(-1,1),
            y: -parseInt(HTC('#ground', 'bottom')) - 10,
          });
        }
      }, 200);}
    }, 600);
    setTimeout(() => {
      w.style.transition = 'all 0.5s ease';
      w.style.transform = w.style.transform.replace('150deg', '50deg');
      w.style.transform = w.style.transform.replace(50, -20);
      weapDirSet('me', objI['me'].move,1);
      //weapDirSet(who,where)
      setTimeout(() => {
        waiter[who].attack = false;
      }, 500);
    }, 1100);
  }
</script>

<!--효과-->
<style>
  .불꽃 {
    width: 10px;
    height: 10px;
    background-color: #ffca8c;
    animation: 불꽃 1s ease forwards;
    position: absolute;
    z-index: 0;
    border-radius: 2.5px;
    transition: all 0.1s linear;
  }

  .꾸밈 {
    width: 5px;
    height: 5px;
    border-radius: 2px;
    border: none;
    background: linear-gradient(180deg, #ff6f28, #ffdca1);
    animation: fade 0.5s ease;
  }

  @keyframes 불꽃 {
    0% {
      transform: scale(1) rotate(0deg);
    }
    100% {
      transform: scale(0) rotate(90deg);
    }
  }

  @keyframes fade {
    0% {
      filter:brightness(2)
    }
    100% {
      opacity: 0;
    }
  }
</style>
<style>
  .딜량 {
    font-size: 30px;
    font-weight: bold;
    animation: 딜량 1s ease forwards;
    animation-delay: 0.1s;
    background: linear-gradient(180deg, white, darkgrey);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    position: absolute;
  }

  @keyframes 딜량 {
    0% {
    }
    100% {
      transform: translate(0, -15px) scale(0.9);
      opacity: 0;
    }
  }
</style>
<script>
  let 불꽃카운터 = 0;
  function 불꽃(위치, 크기) {
    setTimeout(() => {
      불꽃카운터++;
      const 임시카운터 = 불꽃카운터;
      const 불꽃 = document.createElement('div');
      불꽃.id = `불꽃${불꽃카운터}`;
      불꽃.style.left = `${위치.x}px`;
      불꽃.style.bottom = `${위치.y}px`;
      const 랜덤색상 =
        랜덤(1, 2) == 1 ? '#FF5A47' : 랜덤(1, 2) ? '#FF662A' : '#FF8E61';
      불꽃.style.border = '2px solid ' + 랜덤색상;
      불꽃.className = `불꽃 ${크기 ? '꾸밈' : ''}`;
      const 월드 = document.getElementById('onground');
      월드.appendChild(불꽃);

      setTimeout(() => {
        const 불꽃요소 = HTML(`#불꽃${임시카운터}`);
        if (불꽃요소) {
          불꽃요소.style.opacity = 0;
          불꽃요소.remove();
        }
      }, 1000);
    }, 150);
  }

  const 불꽃인터버 = {};

  function 작은불꽃(위치) {
    불꽃카운터++;
    const 임시카운터 = 불꽃카운터;

    const 불꽃 = document.createElement('div');
    불꽃.id = `불꽃${임시카운터}`;
    불꽃.className = '불꽃 꾸밈';
    불꽃.style.left = `${위치.x}px`;
    불꽃.style.bottom = `${위치.y}px`;
    불꽃.style.transform = `rotate(${랜덤(0, 180)-90}deg)`;

    HTML('#onground').appendChild(불꽃);

    불꽃인터버[임시카운터] = setInterval(() => {
      방향이동(`#불꽃${임시카운터}`, 랜덤(0, 180) - 90, 10);
    }, 100);

    setTimeout(() => {
      clearInterval(불꽃인터버[임시카운터]);
      delete 불꽃인터버[임시카운터];
      const 불꽃요소 = HTML(`#불꽃${임시카운터}`);
      불꽃요소.style.display = 'none';
      불꽃요소.remove();
    }, 500);
  }

  let ATcCount = 0;
  function 딜량(xy, d, t, w) {
    ATcCount++;
    let safeC = ATcCount;
    const div = document.createElement('div');
    div.className = '딜량';
    div.id = `ATC${ATcCount}`;
    div.style.left = `${xy[0]}px`;
    div.style.bottom = `${xy[1]}px`;
    div.innerHTML = `${d}`;
    HTML(w).appendChild(div);
    setTimeout(() => {
      HTML(`#ATC${safeC}`).remove();
    }, 1100);
  }
</script>
